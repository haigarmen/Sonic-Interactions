#N canvas 489 23 558 534 10;
#X obj 2 229 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 2 347 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 82 236 cnv 17 3 84 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 82 355 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 82 325 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 82 376 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 199 205 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 2 4 cnv 15 553 42 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 554 42 1;
#X restore 2 3 graph;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#X obj 199 181 cyclone/zl len;
#X text 119 249 anything;
#X text 91 263 mode <symbol>;
#X text 178 249 - one or more element messages to be processed;
#X text 119 324 anything;
#X text 119 375 anything;
#X text 119 354 anything;
#X text 91 306 zlmaxsize <f>;
#X obj 2 401 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 2 509 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X text 170 425 -;
#X text 170 407 -;
#X text 112 407 1) float;
#X text 112 425 1) symbol;
#X obj 2 479 cnv 3 550 3 empty empty attributes 8 12 0 13 -228856 -1
0;
#N canvas 0 22 450 300 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1;
#X restore 304 3 graph;
#X msg 242 128 beep 1 2 3 4;
#X text 143 234 bang;
#X text 126 291 zlclear;
#N canvas 710 75 514 564 examples 0;
#X obj 50 209 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 137 331 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 19 29 You can set the size of the list with a first optional
float argument. If you don't \, then the first argument is a symbol
that specifies the mode type \, and the maximum size is the default:
256 elements., f 54;
#X text 19 160 The maximum size is also set via the 'zlmaxsize' attribute
or message (and it can be up to 32767)., f 54;
#X obj 19 6 cyclone/comment 251 14 monaco ? 0 0 0 0 Arguments: mode
and list size:;
#X obj 410 11 cyclone/comment 185 14 monaco ? 0 0 0 0 Modes:;
#X obj 59 472 cyclone/comment 185 14 monaco ? 0 0 0 0 Inconsistency:
;
#X text 60 497 In Max \, the zl family of objects can be instantiated
with the mode after a dot \, such as [zl.group]. But this is not possible
in Pd \, where the mode needs to be called as an argument after a space.
, f 66;
#X text 19 81 The mode argument is obrigatory and this means there
is no default mode. If you don't set a mode as an argument \, you have
to set it via the mode message., f 54;
#N canvas 740 59 394 428 ecils 0;
#X obj 22 8 comment 185 14 monaco ? 0 0 0 0 Mode: ecils;
#X obj 235 284 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 275 282 split point;
#X text 32 386 See also 'slice' mode;
#X obj 59 271 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 112 345 print ecils_Left;
#X obj 235 346 print ecils_Right;
#X msg 122 275 a b c d e f g h;
#X msg 112 250 1 2 3 4 5 6 7;
#X msg 90 223 mode ecils 4;
#X text 21 35 'ecils' is 'slice' backwards \, so it slices a list in
reverse order. You can set the split point with an argument or with
a float input into the right inlet \, but also when you set the mode
with the mode message. The default point is '0' \, which means no slicing.
;
#X obj 112 308 cyclone/zl ecils 3, f 21;
#X text 24 161 A bang performs the operation in the last received list.
;
#X text 22 111 If you slice at 'n' \, the left outlet spits the last
'n' elements and the right outlet sends the first sliced elements.
;
#X text 172 222 <= sets mode and argument;
#X msg 56 196 zlclear;
#X connect 1 0 11 1;
#X connect 4 0 11 0;
#X connect 7 0 11 0;
#X connect 8 0 11 0;
#X connect 9 0 11 0;
#X connect 11 0 5 0;
#X connect 11 1 6 0;
#X connect 15 0 11 0;
#X restore 412 47 pd ecils;
#N canvas 893 197 393 459 group 0;
#X obj 274 271 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 17 10 comment 185 14 monaco ? 0 0 0 0 Mode: group;
#X obj 95 342 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 267 365 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 307 363 group size;
#X obj 156 388 cyclone/zl group 10;
#X floatatom 191 342 5 0 0 0 - - -, f 5;
#X text 31 344 remainder;
#X obj 274 298 cyclone/uzi 24;
#X text 16 220 The right outlet is inactive.;
#X obj 156 415 print zl_group;
#X msg 156 259 mode group 4;
#X text 34 258 set mode & argument;
#X text 14 117 The input can have one or more elements \, when the
grouped elements reach the group size \, the grouped list is sent out
the left outlet. The remaining items are stored for next group.;
#X text 15 176 A bang message causes it to spit (and clear from the
memory) the remaining stored elements (at the set group size).;
#X msg 98 289 zlclear;
#X text 15 36 The group mode aggroups 'n' elements into a list \, where
'n' cannot be higher than the maximum zl size. You can set 'n' (the
group size) with an argument or with a float input into the right inlet
\, but also when you set the mode with the mode message. The default
group size is 0 \, which means nothing gets grouped and output.;
#X msg 178 316 list g h i j k;
#X msg 166 293 a b c d e f;
#X connect 0 0 8 0;
#X connect 2 0 5 0;
#X connect 3 0 5 1;
#X connect 5 0 10 0;
#X connect 6 0 5 0;
#X connect 8 2 5 0;
#X connect 11 0 5 0;
#X connect 15 0 5 0;
#X connect 17 0 5 0;
#X connect 18 0 5 0;
#X restore 412 72 pd group;
#N canvas 753 249 463 451 iter 0;
#X msg 169 287 1 2 3 4 5 6;
#X msg 151 259 mode iter 4;
#X obj 151 393 print iter;
#X obj 24 18 comment 185 14 monaco ? 0 0 0 0 Mode: iter;
#X text 23 49 The iter mode breaks an input list in to sucessive lists
of a given size. If an input list is smaller than the iter size \,
the lista is output anyway - if the last bit of the broken list is
of a size smaller than the iter size \, it is also output.;
#X obj 111 290 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X floatatom 194 336 5 0 0 0 - - -, f 5;
#X obj 250 343 nbx 3 14 1 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 1 256;
#X text 290 341 iter size;
#X text 23 121 The iter size can be set with an argument or with a
float input into the right inlet \, but also when you set the mode
with the mode message. The minimum iter size is 1 and the default is
'0' \, which means nothing happens.;
#X text 24 202 The right outlet is inactive.;
#X msg 180 312 one two three four five six;
#X obj 151 368 cyclone/zl iter 1;
#X text 24 182 A bang performs the operation in the last received list.
;
#X text 229 258 <= sets mode and argument;
#X msg 127 236 zlclear;
#X connect 0 0 12 0;
#X connect 1 0 12 0;
#X connect 5 0 12 0;
#X connect 6 0 12 0;
#X connect 7 0 12 1;
#X connect 11 0 12 0;
#X connect 12 0 2 0;
#X connect 15 0 12 0;
#X restore 412 97 pd iter;
#N canvas 919 115 408 292 join 0;
#X obj 17 13 comment 185 14 monaco ? 0 0 0 0 Mode: join;
#X obj 141 248 print zl_join;
#X obj 77 159 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X text 25 158 resends;
#X msg 122 147 mode join a b;
#X text 16 44 The join mode joins two lists sent to each inlet (things
in list 2 that are in list 1 are duplicated). A bang resends the last
output or outputs a new list if the right inlet received something
new. Subsequent arguments initialize the right list. The right outlet
is inactive.;
#X obj 141 215 cyclone/zl join 4 5 6;
#X msg 264 176 x y z;
#X msg 141 175 1 2 3;
#X text 208 146 <= sets mode and arguments;
#X msg 97 121 zlclear;
#X connect 2 0 6 0;
#X connect 4 0 6 0;
#X connect 6 0 1 0;
#X connect 7 0 6 1;
#X connect 8 0 6 0;
#X connect 10 0 6 0;
#X restore 412 122 pd join;
#N canvas 781 151 405 407 len 0;
#X msg 155 191 this produces 3;
#X msg 166 223 and this should be five;
#X obj 131 290 cyclone/zl len;
#X msg 131 160 list two elements;
#X obj 131 326 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 72 226 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 131 354 print zl_len;
#X obj 25 17 comment 185 14 monaco ? 0 0 0 0 Mode: len;
#X msg 106 131 mode len;
#X msg 176 256 1 2 3 4 5 6 7 8 9 10 11 12 13 14;
#X text 164 130 <= sets mode;
#X text 21 226 resends;
#X text 24 47 The len mode outputs how many elements a lista has. A
bang resends the last output. This mode has no arguments. The right
inlet/outlet are inactive.;
#X msg 84 107 zlclear;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 5 0 2 0;
#X connect 8 0 2 0;
#X connect 9 0 2 0;
#X connect 13 0 2 0;
#X restore 412 148 pd len;
#N canvas 573 172 789 398 mth 0;
#X obj 70 266 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 451 220 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 25 8 comment 185 14 monaco ? 0 0 0 0 Mode: mth;
#X msg 117 259 1 2 3 4 5 6 7 8 9 10;
#X obj 210 293 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 72 358 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 25 162 A bang performs the operation in the last received list.
;
#X msg 504 200 1 2 3 4 5 6 7 8 9 10;
#X obj 440 301 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 421 72 The element that replaces the mth element in the right
outlet is set as the 2nd argument. This is optional \, no second argument
(the default) does not replace the mth element by anything.;
#X obj 595 300 print replaced_mth;
#X obj 484 300 print mth;
#X text 638 229 mth / replacement;
#X text 250 292 mth;
#X obj 210 355 print not_the_mth;
#X obj 117 355 print mth;
#X obj 117 321 cyclone/zl mth 3;
#X obj 484 264 cyclone/zl mth 2 hi;
#X msg 484 172 mode mth 3 hello;
#X msg 595 229 6 bye;
#X text 24 36 The mode mth is the same as mth but starts counting from
0 instead. It outputs the mth element of a message through the left
outlet. The right outlet outputs the remaining elements \, but the
output can also replace the mth element by another.;
#X text 24 100 The mth element is set as the 1st argument. The 1st
element is treated as "0 '(the default). If you set the mth to a number
greater than the input list \, all the elements are sent to the right
outlet \, the same happens for negative mth values.;
#X msg 103 232 mode mth 5;
#X msg 77 205 zlclear;
#X msg 462 145 zlclear;
#X connect 0 0 16 0;
#X connect 1 0 17 0;
#X connect 3 0 16 0;
#X connect 4 0 16 1;
#X connect 7 0 17 0;
#X connect 16 0 5 0;
#X connect 16 0 15 0;
#X connect 16 1 14 0;
#X connect 17 0 8 0;
#X connect 17 0 11 0;
#X connect 17 1 10 0;
#X connect 18 0 17 0;
#X connect 19 0 17 1;
#X connect 22 0 16 0;
#X connect 23 0 16 0;
#X connect 24 0 17 0;
#X restore 412 174 pd mth;
#N canvas 426 244 812 412 nth 0;
#X obj 127 362 print nth;
#X obj 504 280 print nth;
#X obj 75 274 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 466 197 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 25 8 comment 185 14 monaco ? 0 0 0 0 Mode: nth;
#X msg 127 266 1 2 3 4 5 6 7 8 9 10;
#X obj 220 300 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 260 299 nth;
#X obj 82 365 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 127 328 cyclone/zl nth 3;
#X text 25 165 A bang performs the operation in the last received list.
;
#X obj 220 362 print not_the_nth;
#X obj 615 280 print replaced_nth;
#X obj 504 244 cyclone/zl nth 2 hi;
#X msg 524 180 1 2 3 4 5 6 7 8 9 10;
#X text 421 55 The element that replaces the nth element in the right
outlet is set as the 2nd argument. This is optional \, no second argument
(the defaukt) does not replace the nth element by anything.;
#X obj 460 281 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 654 209 nth / replacement;
#X msg 504 152 mode nth 3 hello;
#X text 24 36 The mode nth is the same as mth but starts counting from
1 instead. It outputs the nth element of a message through the left
outlet. The right outlet outputs the remaining elements \, but the
output can also replace the nth element by another., f 61;
#X text 23 103 The nth element is set as the 1st argument. The 1st
element is treated as "1" \, if you set it as 0 (the default) or to
a number greater than the input list \, all the elements are sent to
the right outlet and nothing is sent via the left outlet., f 61;
#X text 185 234 <= sets mode and arguments;
#X msg 109 235 mode nth 8;
#X msg 615 209 0 bye;
#X msg 86 207 zlclear;
#X msg 482 127 zlclear;
#X connect 2 0 9 0;
#X connect 3 0 13 0;
#X connect 5 0 9 0;
#X connect 6 0 9 1;
#X connect 9 0 0 0;
#X connect 9 0 8 0;
#X connect 9 1 11 0;
#X connect 13 0 1 0;
#X connect 13 0 16 0;
#X connect 13 1 12 0;
#X connect 14 0 13 0;
#X connect 18 0 13 0;
#X connect 22 0 9 0;
#X connect 23 0 13 1;
#X connect 24 0 9 0;
#X connect 25 0 13 0;
#X restore 412 201 pd nth;
#N canvas 786 294 430 326 reg 0;
#X obj 69 286 print reg;
#X obj 111 222 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X msg 306 192 this is stored;
#X msg 91 193 this is stored and sent;
#X msg 69 161 1 2 3 4;
#X msg 287 161 5 6 7 8;
#X text 136 224 <= outputs stored list;
#X msg 52 136 mode reg one two;
#X text 159 135 <= sets mode and arguments;
#X text 30 44 The reg mode stores lists. The initially stored list
is set as an argument and changed in the right inlet. The left inlet
stores and outputs the list. A bang sends the last stored list. The
right outlet is inactive.;
#X obj 33 17 comment 185 14 monaco ? 0 0 0 0 Mode: reg;
#X msg 30 114 zlclear;
#X obj 69 251 cyclone/zl reg initially stored elements;
#X connect 1 0 12 0;
#X connect 2 0 12 1;
#X connect 3 0 12 0;
#X connect 4 0 12 0;
#X connect 5 0 12 1;
#X connect 7 0 12 0;
#X connect 11 0 12 0;
#X connect 12 0 0 0;
#X restore 412 228 pd reg;
#N canvas 865 220 418 288 rev 0;
#X msg 137 155 way this something means this;
#X obj 26 7 comment 185 14 monaco ? 0 0 0 0 Mode: rev;
#X obj 80 159 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 25 38 The rev mode reverses the elements of a list. A bang
resends the last output. This mode has no arguments. The right inlet/outlet
are inactive.;
#X msg 148 182 1 2 3 4 5 6 7 8 9 10;
#X obj 117 252 print zl_rev;
#X msg 117 120 mode rev;
#X text 178 119 <= sets mode;
#X obj 117 217 cyclone/zl rev;
#X msg 94 91 zlclear;
#X connect 0 0 8 0;
#X connect 2 0 8 0;
#X connect 4 0 8 0;
#X connect 6 0 8 0;
#X connect 8 0 5 0;
#X connect 9 0 8 0;
#X restore 412 254 pd rev;
#N canvas 842 204 399 436 rot 0;
#X msg 123 268 sometimes my grammar is all messed up;
#X obj 103 356 cyclone/zl rot 3;
#X obj 196 331 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 17 7 comment 185 14 monaco ? 0 0 0 0 Mode: rot;
#X obj 64 311 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 18 156 A bang performs the operation in the last received list.
;
#X text 18 176 The right outlet is inactive.;
#X obj 103 395 print zl_rot;
#X text 17 35 The mode rot does rotate a list. If the rotation point
is a positive number 'n' \, the list is shifted to the right by 'n'
positions \, and the last 'n' elements are placed at the list start.
If 'n' is negative \, the rotation happens at the other direction.
;
#X text 18 99 You can set the rotation point with an argument or with
a float input into the right inlet \, but also when you set the mode
with the mode message. The default point is '0' \, which means no rotation.
;
#X msg 147 298 1 2 3 4 5 6 7 8 9 10 11 12;
#X msg 103 239 mode rot -3;
#X text 180 239 <= sets mode and argument;
#X msg 78 212 zlclear;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 1 1;
#X connect 4 0 1 0;
#X connect 10 0 1 0;
#X connect 11 0 1 0;
#X connect 13 0 1 0;
#X restore 412 280 pd rot;
#N canvas 949 241 424 357 sect 0;
#X obj 52 220 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 229 305 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X text 244 321 no common elements;
#X text 250 307 bang if there are;
#X obj 88 306 print zl_sect;
#X msg 229 217 1 5 10 15 20;
#X obj 20 7 comment 185 14 monaco ? 0 0 0 0 Mode: sect;
#X msg 88 191 mode sect 3 6 9;
#X text 18 35 The mode sect outputs the elements of an input list that
are in common to another list (set as an argument or via the right
inlet). The default is an empty list.;
#X text 19 82 The right outlet outputs a bang if there are no matching
elements.;
#X text 19 117 A bang performs the operation in the last received list
into the left inlet.;
#X msg 96 246 1 2 3 4 5 6 7 8 9 10;
#X msg 249 243 0 100 1000;
#X obj 88 274 cyclone/zl sect 1 10 100;
#X text 188 191 <= sets mode and arguments;
#X msg 70 165 zlclear;
#X connect 0 0 13 0;
#X connect 5 0 13 1;
#X connect 7 0 13 0;
#X connect 11 0 13 0;
#X connect 12 0 13 1;
#X connect 13 0 4 0;
#X connect 13 1 1 0;
#X connect 15 0 13 0;
#X restore 412 307 pd sect;
#N canvas 824 23 415 398 slice 0;
#X obj 22 8 comment 185 14 monaco ? 0 0 0 0 Mode: slice;
#X obj 235 264 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 275 262 split point;
#X obj 55 247 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X msg 122 255 a b c d e f g h;
#X msg 112 230 1 2 3 4 5 6 7;
#X text 24 141 A bang performs the operation in the last received list.
;
#X text 32 366 See also 'ecils' mode;
#X text 21 35 The slice mode slices a list. You can set the split point
with an argument or with a float input into the right inlet \, but
also when you set the mode with the mode message. The default point
is '0' \, which means no slicing.;
#X msg 91 203 mode slice 4;
#X obj 112 288 cyclone/zl slice 3, f 21;
#X obj 112 325 print slice_Left;
#X obj 235 326 print slice_Right;
#X text 22 101 If you slice at 'n' \, the left outlet spits the first
'n' elements and the right outlet sends the remaining elements.;
#X text 175 203 <= sets mode and argument;
#X msg 63 176 zlclear;
#X connect 1 0 10 1;
#X connect 3 0 10 0;
#X connect 4 0 10 0;
#X connect 5 0 10 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 10 1 12 0;
#X connect 15 0 10 0;
#X restore 412 333 pd slice;
#N canvas 889 66 405 334 sub 0;
#X obj 69 188 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X msg 210 220 11;
#X msg 246 220 7 8 9;
#X obj 20 14 comment 185 14 monaco ? 0 0 0 0 Mode: sub;
#X msg 175 220 1;
#X obj 210 285 print occurances;
#X obj 111 285 print position;
#X text 18 42 the sub mode searches for occurances of the element(s)
of the second list to the first list and outputs the number of occurances
in the right outlet and the position of such occurances in the left
outlet. If no occurance is found \, the right outlet outputs 0 and
nothing is output on the left outlet. Subsequent arguments initialize
the right list.;
#X msg 111 161 mode sub 5;
#X text 182 161 <= sets mode and arguments;
#X msg 125 189 1 2 3 7 8 9 10 4 5 6 7 8 9 10;
#X obj 111 251 cyclone/zl sub 10;
#X msg 91 134 zlclear;
#X connect 0 0 11 0;
#X connect 1 0 11 1;
#X connect 2 0 11 1;
#X connect 4 0 11 1;
#X connect 8 0 11 0;
#X connect 10 0 11 0;
#X connect 11 0 6 0;
#X connect 11 1 5 0;
#X connect 12 0 11 0;
#X restore 412 388 pd sub;
#N canvas 861 239 405 268 union 0;
#X obj 65 153 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 20 12 comment 185 14 monaco ? 0 0 0 0 Mode: union;
#X obj 108 227 print zl_union;
#X text 21 39 union the stuff in two lists (but does not duplicate
things in list 2 that are in list 1). Subsequent arguments initialize
the right list. The right outlet is inactive.;
#X msg 237 160 6.5 4 2.3 2 2 8 hi;
#X msg 108 127 mode union a b;
#X text 204 126 <= sets mode and arguments;
#X obj 108 198 cyclone/zl union 10 20;
#X msg 83 96 zlclear;
#X msg 122 159 2.3 7 6.5 hi;
#X connect 0 0 7 0;
#X connect 4 0 7 1;
#X connect 5 0 7 0;
#X connect 7 0 2 0;
#X connect 8 0 7 0;
#X connect 9 0 7 0;
#X restore 412 414 pd union;
#X text 189 205 set to default;
#X obj 137 355 print length;
#X msg 163 249 zlmaxsize \$1;
#X msg 163 205 256;
#X msg 177 227 512;
#X text 19 385 In the above example \, the objects are initialized
to a size of 512 but can be resized to the default (256). Note that
the group message can't group 512 elements if its size is 256 \, hence
it groups two 256 elements message., f 54;
#X text 203 227 back to 512;
#X obj 50 236 cyclone/uzi 512;
#X obj 137 276 cyclone/zl 512 group 512;
#X obj 137 304 cyclone/zl len @zlmaxsize 512;
#N canvas 889 66 405 380 sort 0;
#X obj 69 218 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 20 14 comment 185 14 monaco ? 0 0 0 0 Mode: sort;
#X text 192 191 <= sets mode and arguments;
#X msg 91 164 zlclear;
#X msg 233 250 1;
#X msg 198 250 -1;
#X msg 111 191 mode sort -1;
#X obj 111 281 cyclone/zl sort;
#X obj 111 315 print sorted;
#X obj 198 315 print indexes;
#X text 17 42 The sort mode sorts the elements of a list. An additional
argument specifies the order: "-1" sorts in descending order \, and
any other value sorts in ascending order (the default is "0"/ascending).
This vis also specified in the right inlet.;
#X text 264 250 <= order;
#X text 18 104 The left outlet outputs the sorted list \, and the right
outlet outputs the sorted indexes., f 57;
#X msg 125 220 10 3 b 4 6 a 9 d 2 c 1 5 0 8 7;
#X connect 0 0 7 0;
#X connect 3 0 7 0;
#X connect 4 0 7 1;
#X connect 5 0 7 1;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 7 1 9 0;
#X connect 13 0 7 0;
#X restore 412 361 pd sort;
#X text 19 121 Check details about each mode in the subpatches on the
right. The modes introduced in the Max5+ versions are not implemented
yet., f 54;
#X connect 0 0 30 0;
#X connect 1 0 24 0;
#X connect 25 0 32 0;
#X connect 26 0 25 0;
#X connect 27 0 25 0;
#X connect 30 2 31 0;
#X connect 31 0 32 0;
#X connect 32 0 1 0;
#X restore 475 202 pd examples;
#X text 178 356 - output according to the mode: see details in [pd
examples];
#X text 178 375 - output according to the mode: see details in [pd
examples];
#X obj 166 127 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 247 153 zlclear;
#X text 114 126 resends;
#X text 117 141 length;
#X text 178 324 - depends on the mode \, see [pd examples];
#N canvas 727 348 463 278 subsequent_arguments 0;
#X text 17 78 group;
#X text 23 93 iter;
#X text 29 124 mth;
#X text 29 154 reg;
#X text 23 185 sect;
#X text 17 200 slice;
#X text 29 169 rot;
#X text 17 64 ecils;
#X text 29 139 nth;
#X text 56 124 - float: the element position counting from 0 (default
0), f 65;
#X text 56 154 - anything: stored elements (default none), f 65;
#X text 29 233 sub;
#X text 56 233 - anything: elements to look for (default none), f
65;
#X text 56 78 - float: length of the grouped list (default is zlmaxsize)
, f 65;
#X text 56 139 - float: the element position counting from 1 (default
0), f 65;
#X text 56 169 - float: number to rotate to (default 0), f 65;
#X text 56 200 - float: position to slice the list (default 0), f
65;
#X text 56 64 - float: position to slice the list (default 0), f 65
;
#X text 56 185 - anything: to compare with left input (default none)
, f 65;
#X text 56 93 - float: length of output list (default 0), f 65;
#X text 17 248 union;
#X text 56 248 - anything: elements to union to the first list (default
none), f 65;
#X text 23 109 join;
#X text 56 109 - anything: elements to join to the first list (default
none), f 65;
#X text 53 13 The modes len & rev don't have arguments. The other modes
can have subsequent arguments as below. See also [pd examples] for
more details on how they work., f 62;
#X text 23 216 sort;
#X text 56 216 - float: order "-1" is desending \, ascending otherwise
(default 0), f 65;
#X restore 357 454 pd subsequent_arguments;
#X text 178 264 -;
#X text 190 263 sets mode (you can also set subsequent arguments) -
check [pd examples] for more info;
#X text 70 85 [zl] processes messages with one or more elements ("list
messages' or "anything") according to a mode (set via argument/message).
, f 66;
#X obj 17 57 cyclone/comment 0 18 times ? 0 0 0 0 List processor;
#X obj 16 4 cyclone/comment 0 37 times ? 0 0 0 0 zl;
#X obj 322 28 cyclone/comment 0 13 courier ? 0 224 228 220 Objects
cloned from Max/MSP;
#X obj 363 4 cyclone/comment 0 24 courier ? 0 224 228 220 cyclone;
#X text 178 306 - sets maximum list size (from 1 to 32767);
#X text 234 205 <= number of elements in a message;
#X text 293 181 length mode;
#X text 184 407 optional: maximum list size (1 - 32767 \, default 256)
;
#X text 129 486 @zlmaxsize <float> - max list size (1 - 32767 \, default
256), f 62;
#X text 178 291 - clears mode's arguments and received data in both
inlets;
#X obj 199 129 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 178 234 - mode dependant operation on current data see [pd
examples];
#X text 298 153 clears loaded data;
#X obj 176 205 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 184 425 mode (ecils \, group \, iter \, join \, len \, mth
\, nth \, reg \, rev \, rot \, sect \, slice \, sort \, sub or union).
Modes can have subsequent arguments \, check:;
#X connect 10 0 6 0;
#X connect 10 0 54 0;
#X connect 26 0 10 0;
#X connect 32 0 10 0;
#X connect 33 0 10 0;
#X connect 51 0 10 0;
